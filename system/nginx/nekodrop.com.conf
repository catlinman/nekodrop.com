
# HTTP to HTTPS redirect
server {
    # Listen on port 80 (HTTP) via IPv4 and IPv6.
    listen 80;
    listen [::]:80;

    # Set domain names to listen under for this directive.
    server_name nekodrop.com www.nekodrop.com;

    # Redirect to the same address but as an HTTPS connection.
    return 301 https://$server_name$request_uri;
}

# SSL server setup
server {
    # Listen on port 443 (HTTPS) via IPv4 and IPv6.
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    # Include domain SSL configuration and further security settings.
    include snippets/ssl-nekodrop.com.conf;
    include snippets/ssl-params.conf;

    # Include Security Headers.
    include snippets/security-headers.conf;

    # Set the root directory.
    root /srv/nekodrop.com/public;

    # Set domain names to listen under for this directive.
    server_name nekodrop.com www.nekodrop.com;

    # Set custom access and error logs.
    access_log /srv/nekodrop.com/private/log/access.log;
    error_log /srv/nekodrop.com/private/log/error.log;

    # Optionally name them differently if all logs are in the same directory.
    # access_log /srv/nekodrop.com/private/log/site_access.log;
    # error_log /srv/nekodrop.com/private/log/site_error.log;

    # Pass any errors and access to the default nginx logs.
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Set the root file to serve.
    index index.html index.htm;

    # Custom error page configuration.
    error_page 403 = @error;
    error_page 404 = @error;
    error_page 500 502 503 504 = @error;

    # Pass set the robots.txt configuration.
    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    # Handle the root directory.
    location / {
        # Serve HTML files and return 404 if not found.
        try_files $uri $uri/ $uri.html = @error;

        # Setup additional rules for caching.
        expires 1d;
    }

    # Handle static files.
    location ~*  \.(jpg|jpeg|png|gif|svg|ico|css|js)$ {
        # Static content should expire after a longer period of time.
        expires 7d;

        # We don't have to log these kinds of files.
        access_log off;
    }

    # Error handling that simpy redirects to the root directory.
    location @error {
        return 302 https://$server_name;
    }
}
